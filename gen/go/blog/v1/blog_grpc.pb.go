// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: blog/v1/blog.proto

package blogv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlogService_CreateBlog_FullMethodName    = "/blog.v1.BlogService/CreateBlog"
	BlogService_GetBlog_FullMethodName       = "/blog.v1.BlogService/GetBlog"
	BlogService_GetBlogBySlug_FullMethodName = "/blog.v1.BlogService/GetBlogBySlug"
	BlogService_ListBlogs_FullMethodName     = "/blog.v1.BlogService/ListBlogs"
	BlogService_UpdateBlog_FullMethodName    = "/blog.v1.BlogService/UpdateBlog"
	BlogService_DeleteBlog_FullMethodName    = "/blog.v1.BlogService/DeleteBlog"
	BlogService_UnDeleteBlog_FullMethodName  = "/blog.v1.BlogService/UnDeleteBlog"
)

// BlogServiceClient is the client API for BlogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogServiceClient interface {
	CreateBlog(ctx context.Context, in *CreateBlogRequest, opts ...grpc.CallOption) (*CreateBlogResponse, error)
	GetBlog(ctx context.Context, in *GetBlogRequest, opts ...grpc.CallOption) (*GetBlogResponse, error)
	GetBlogBySlug(ctx context.Context, in *GetBlogBySlugRequest, opts ...grpc.CallOption) (*GetBlogResponse, error)
	ListBlogs(ctx context.Context, in *ListBlogsRequest, opts ...grpc.CallOption) (*ListBlogsResponse, error)
	UpdateBlog(ctx context.Context, in *UpdateBlogRequest, opts ...grpc.CallOption) (*UpdateBlogResponse, error)
	DeleteBlog(ctx context.Context, in *DeleteBlogRequest, opts ...grpc.CallOption) (*DeleteBlogResponse, error)
	UnDeleteBlog(ctx context.Context, in *UnDeleteBlogRequest, opts ...grpc.CallOption) (*UnDeleteBlogResponse, error)
}

type blogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogServiceClient(cc grpc.ClientConnInterface) BlogServiceClient {
	return &blogServiceClient{cc}
}

func (c *blogServiceClient) CreateBlog(ctx context.Context, in *CreateBlogRequest, opts ...grpc.CallOption) (*CreateBlogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBlogResponse)
	err := c.cc.Invoke(ctx, BlogService_CreateBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetBlog(ctx context.Context, in *GetBlogRequest, opts ...grpc.CallOption) (*GetBlogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlogResponse)
	err := c.cc.Invoke(ctx, BlogService_GetBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetBlogBySlug(ctx context.Context, in *GetBlogBySlugRequest, opts ...grpc.CallOption) (*GetBlogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlogResponse)
	err := c.cc.Invoke(ctx, BlogService_GetBlogBySlug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) ListBlogs(ctx context.Context, in *ListBlogsRequest, opts ...grpc.CallOption) (*ListBlogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBlogsResponse)
	err := c.cc.Invoke(ctx, BlogService_ListBlogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) UpdateBlog(ctx context.Context, in *UpdateBlogRequest, opts ...grpc.CallOption) (*UpdateBlogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBlogResponse)
	err := c.cc.Invoke(ctx, BlogService_UpdateBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) DeleteBlog(ctx context.Context, in *DeleteBlogRequest, opts ...grpc.CallOption) (*DeleteBlogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBlogResponse)
	err := c.cc.Invoke(ctx, BlogService_DeleteBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) UnDeleteBlog(ctx context.Context, in *UnDeleteBlogRequest, opts ...grpc.CallOption) (*UnDeleteBlogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnDeleteBlogResponse)
	err := c.cc.Invoke(ctx, BlogService_UnDeleteBlog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogServiceServer is the server API for BlogService service.
// All implementations must embed UnimplementedBlogServiceServer
// for forward compatibility.
type BlogServiceServer interface {
	CreateBlog(context.Context, *CreateBlogRequest) (*CreateBlogResponse, error)
	GetBlog(context.Context, *GetBlogRequest) (*GetBlogResponse, error)
	GetBlogBySlug(context.Context, *GetBlogBySlugRequest) (*GetBlogResponse, error)
	ListBlogs(context.Context, *ListBlogsRequest) (*ListBlogsResponse, error)
	UpdateBlog(context.Context, *UpdateBlogRequest) (*UpdateBlogResponse, error)
	DeleteBlog(context.Context, *DeleteBlogRequest) (*DeleteBlogResponse, error)
	UnDeleteBlog(context.Context, *UnDeleteBlogRequest) (*UnDeleteBlogResponse, error)
	mustEmbedUnimplementedBlogServiceServer()
}

// UnimplementedBlogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlogServiceServer struct{}

func (UnimplementedBlogServiceServer) CreateBlog(context.Context, *CreateBlogRequest) (*CreateBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlog not implemented")
}
func (UnimplementedBlogServiceServer) GetBlog(context.Context, *GetBlogRequest) (*GetBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlog not implemented")
}
func (UnimplementedBlogServiceServer) GetBlogBySlug(context.Context, *GetBlogBySlugRequest) (*GetBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogBySlug not implemented")
}
func (UnimplementedBlogServiceServer) ListBlogs(context.Context, *ListBlogsRequest) (*ListBlogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlogs not implemented")
}
func (UnimplementedBlogServiceServer) UpdateBlog(context.Context, *UpdateBlogRequest) (*UpdateBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlog not implemented")
}
func (UnimplementedBlogServiceServer) DeleteBlog(context.Context, *DeleteBlogRequest) (*DeleteBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlog not implemented")
}
func (UnimplementedBlogServiceServer) UnDeleteBlog(context.Context, *UnDeleteBlogRequest) (*UnDeleteBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnDeleteBlog not implemented")
}
func (UnimplementedBlogServiceServer) mustEmbedUnimplementedBlogServiceServer() {}
func (UnimplementedBlogServiceServer) testEmbeddedByValue()                     {}

// UnsafeBlogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogServiceServer will
// result in compilation errors.
type UnsafeBlogServiceServer interface {
	mustEmbedUnimplementedBlogServiceServer()
}

func RegisterBlogServiceServer(s grpc.ServiceRegistrar, srv BlogServiceServer) {
	// If the following call pancis, it indicates UnimplementedBlogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlogService_ServiceDesc, srv)
}

func _BlogService_CreateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).CreateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_CreateBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).CreateBlog(ctx, req.(*CreateBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetBlog(ctx, req.(*GetBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetBlogBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetBlogBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetBlogBySlug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetBlogBySlug(ctx, req.(*GetBlogBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_ListBlogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).ListBlogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_ListBlogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).ListBlogs(ctx, req.(*ListBlogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_UpdateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).UpdateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_UpdateBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).UpdateBlog(ctx, req.(*UpdateBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_DeleteBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).DeleteBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_DeleteBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).DeleteBlog(ctx, req.(*DeleteBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_UnDeleteBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnDeleteBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).UnDeleteBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_UnDeleteBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).UnDeleteBlog(ctx, req.(*UnDeleteBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogService_ServiceDesc is the grpc.ServiceDesc for BlogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.v1.BlogService",
	HandlerType: (*BlogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlog",
			Handler:    _BlogService_CreateBlog_Handler,
		},
		{
			MethodName: "GetBlog",
			Handler:    _BlogService_GetBlog_Handler,
		},
		{
			MethodName: "GetBlogBySlug",
			Handler:    _BlogService_GetBlogBySlug_Handler,
		},
		{
			MethodName: "ListBlogs",
			Handler:    _BlogService_ListBlogs_Handler,
		},
		{
			MethodName: "UpdateBlog",
			Handler:    _BlogService_UpdateBlog_Handler,
		},
		{
			MethodName: "DeleteBlog",
			Handler:    _BlogService_DeleteBlog_Handler,
		},
		{
			MethodName: "UnDeleteBlog",
			Handler:    _BlogService_UnDeleteBlog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog/v1/blog.proto",
}

const (
	NewsletterService_SubscribeNewsletter_FullMethodName   = "/blog.v1.NewsletterService/SubscribeNewsletter"
	NewsletterService_UnsubscribeNewsletter_FullMethodName = "/blog.v1.NewsletterService/UnsubscribeNewsletter"
	NewsletterService_GetNewsletter_FullMethodName         = "/blog.v1.NewsletterService/GetNewsletter"
	NewsletterService_ListNewsletters_FullMethodName       = "/blog.v1.NewsletterService/ListNewsletters"
)

// NewsletterServiceClient is the client API for NewsletterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewsletterServiceClient interface {
	SubscribeNewsletter(ctx context.Context, in *SubscribeNewsletterRequest, opts ...grpc.CallOption) (*SubscribeNewsletterResponse, error)
	UnsubscribeNewsletter(ctx context.Context, in *UnsubscribeNewsletterRequest, opts ...grpc.CallOption) (*UnsubscribeNewsletterResponse, error)
	GetNewsletter(ctx context.Context, in *GetNewsletterRequest, opts ...grpc.CallOption) (*GetNewsletterResponse, error)
	ListNewsletters(ctx context.Context, in *ListNewslettersRequest, opts ...grpc.CallOption) (*ListNewslettersResponse, error)
}

type newsletterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsletterServiceClient(cc grpc.ClientConnInterface) NewsletterServiceClient {
	return &newsletterServiceClient{cc}
}

func (c *newsletterServiceClient) SubscribeNewsletter(ctx context.Context, in *SubscribeNewsletterRequest, opts ...grpc.CallOption) (*SubscribeNewsletterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeNewsletterResponse)
	err := c.cc.Invoke(ctx, NewsletterService_SubscribeNewsletter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsletterServiceClient) UnsubscribeNewsletter(ctx context.Context, in *UnsubscribeNewsletterRequest, opts ...grpc.CallOption) (*UnsubscribeNewsletterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnsubscribeNewsletterResponse)
	err := c.cc.Invoke(ctx, NewsletterService_UnsubscribeNewsletter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsletterServiceClient) GetNewsletter(ctx context.Context, in *GetNewsletterRequest, opts ...grpc.CallOption) (*GetNewsletterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNewsletterResponse)
	err := c.cc.Invoke(ctx, NewsletterService_GetNewsletter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsletterServiceClient) ListNewsletters(ctx context.Context, in *ListNewslettersRequest, opts ...grpc.CallOption) (*ListNewslettersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNewslettersResponse)
	err := c.cc.Invoke(ctx, NewsletterService_ListNewsletters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsletterServiceServer is the server API for NewsletterService service.
// All implementations must embed UnimplementedNewsletterServiceServer
// for forward compatibility.
type NewsletterServiceServer interface {
	SubscribeNewsletter(context.Context, *SubscribeNewsletterRequest) (*SubscribeNewsletterResponse, error)
	UnsubscribeNewsletter(context.Context, *UnsubscribeNewsletterRequest) (*UnsubscribeNewsletterResponse, error)
	GetNewsletter(context.Context, *GetNewsletterRequest) (*GetNewsletterResponse, error)
	ListNewsletters(context.Context, *ListNewslettersRequest) (*ListNewslettersResponse, error)
	mustEmbedUnimplementedNewsletterServiceServer()
}

// UnimplementedNewsletterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNewsletterServiceServer struct{}

func (UnimplementedNewsletterServiceServer) SubscribeNewsletter(context.Context, *SubscribeNewsletterRequest) (*SubscribeNewsletterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeNewsletter not implemented")
}
func (UnimplementedNewsletterServiceServer) UnsubscribeNewsletter(context.Context, *UnsubscribeNewsletterRequest) (*UnsubscribeNewsletterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeNewsletter not implemented")
}
func (UnimplementedNewsletterServiceServer) GetNewsletter(context.Context, *GetNewsletterRequest) (*GetNewsletterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsletter not implemented")
}
func (UnimplementedNewsletterServiceServer) ListNewsletters(context.Context, *ListNewslettersRequest) (*ListNewslettersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNewsletters not implemented")
}
func (UnimplementedNewsletterServiceServer) mustEmbedUnimplementedNewsletterServiceServer() {}
func (UnimplementedNewsletterServiceServer) testEmbeddedByValue()                           {}

// UnsafeNewsletterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsletterServiceServer will
// result in compilation errors.
type UnsafeNewsletterServiceServer interface {
	mustEmbedUnimplementedNewsletterServiceServer()
}

func RegisterNewsletterServiceServer(s grpc.ServiceRegistrar, srv NewsletterServiceServer) {
	// If the following call pancis, it indicates UnimplementedNewsletterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NewsletterService_ServiceDesc, srv)
}

func _NewsletterService_SubscribeNewsletter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeNewsletterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsletterServiceServer).SubscribeNewsletter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsletterService_SubscribeNewsletter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsletterServiceServer).SubscribeNewsletter(ctx, req.(*SubscribeNewsletterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsletterService_UnsubscribeNewsletter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeNewsletterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsletterServiceServer).UnsubscribeNewsletter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsletterService_UnsubscribeNewsletter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsletterServiceServer).UnsubscribeNewsletter(ctx, req.(*UnsubscribeNewsletterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsletterService_GetNewsletter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsletterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsletterServiceServer).GetNewsletter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsletterService_GetNewsletter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsletterServiceServer).GetNewsletter(ctx, req.(*GetNewsletterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsletterService_ListNewsletters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNewslettersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsletterServiceServer).ListNewsletters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NewsletterService_ListNewsletters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsletterServiceServer).ListNewsletters(ctx, req.(*ListNewslettersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NewsletterService_ServiceDesc is the grpc.ServiceDesc for NewsletterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewsletterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.v1.NewsletterService",
	HandlerType: (*NewsletterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubscribeNewsletter",
			Handler:    _NewsletterService_SubscribeNewsletter_Handler,
		},
		{
			MethodName: "UnsubscribeNewsletter",
			Handler:    _NewsletterService_UnsubscribeNewsletter_Handler,
		},
		{
			MethodName: "GetNewsletter",
			Handler:    _NewsletterService_GetNewsletter_Handler,
		},
		{
			MethodName: "ListNewsletters",
			Handler:    _NewsletterService_ListNewsletters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog/v1/blog.proto",
}
