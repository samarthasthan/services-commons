syntax = "proto3";

package profile.v1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/samarthasthan/services-commons/gen/go/profile/v1;profilev1";

message CreateProfileRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  string full_name = 2 [(buf.validate.field).string.min_len = 1];
  string email = 3 [(buf.validate.field).string.email = true];
}

message CreateProfileResponse {
  string profile_id = 1; 
  string user_id = 2;   
}

message GetProfileRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
}

message GetProfileResponse {
  string profile_id = 1; 
  string user_id = 2;   
  string username = 3;
  string full_name = 4;
  string email = 5;
  string bio = 6;
  string avatar = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
  google.protobuf.Timestamp deleted_at = 10;
}

message UpdateProfileRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  string full_name = 2 ;
  string email = 3 ;
  string bio = 4;
  string avatar = 5;
  string username = 6 ;
}

message UpdateProfileResponse {
  string profile_id = 1;
  string user_id = 2;
}

message DeleteProfileRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
}

message DeleteProfileResponse {
  bool is_done = 1;
}

message DeleteProfileByEmailRequest {
  string email = 1 [(buf.validate.field).string.email = true];
}

message DeleteProfileByEmailResponse {
  bool is_done = 1;
}

message UnDeleteProfileRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
}

message UnDeleteProfileResponse {
  bool is_done = 1;
}

// -------------------- New Avatar Upload Feature --------------------

// Option 1: Generate a pre-signed upload URL to upload directly to S3
message GenerateAvatarUploadUrlRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  string file_name = 2 [(buf.validate.field).string.min_len = 1];
  string content_type = 3 [(buf.validate.field).string.min_len = 1];
}

message GenerateAvatarUploadUrlResponse {
  string upload_url = 1; // Pre-signed S3 URL for uploading
  string avatar_url = 2; // The final public/read URL after upload
}

// Option 2: (Optional) Direct upload stream RPC if you want server-handled uploads
// (you can skip this if using pre-signed URLs)
message UploadAvatarRequest {
  string user_id = 1 [(buf.validate.field).string.uuid = true];
  bytes chunk_data = 2; // For streaming upload chunks
}

message UploadAvatarResponse {
  string avatar_url = 1; // Final S3 URL
}


service ProfileService {
  rpc CreateProfile(CreateProfileRequest) returns (CreateProfileResponse);
  rpc GetProfile(GetProfileRequest) returns (GetProfileResponse);
  rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse);
  rpc DeleteProfile(DeleteProfileRequest) returns (DeleteProfileResponse);
  rpc DeleteProfileByEmail(DeleteProfileByEmailRequest) returns (DeleteProfileByEmailResponse);
  rpc UnDeleteProfile(UnDeleteProfileRequest) returns (UnDeleteProfileResponse);

  // New RPCs for Avatar handling
  rpc GenerateAvatarUploadUrl(GenerateAvatarUploadUrlRequest) returns (GenerateAvatarUploadUrlResponse);
  // Optional: streaming version if uploading file bytes via gRPC directly
  rpc UploadAvatar(stream UploadAvatarRequest) returns (UploadAvatarResponse);
}
