services:
  kafka:
    build:
      context: ../build/dockerfile/kafka
      dockerfile: ./Dockerfile
    container_name: kafka
    ports:
      - ${KAFKA_EXTERNAL_PORT}:9092
    networks:
      - services
    restart: always
    healthcheck:
      test:
        ["CMD-SHELL", "./wait-for.sh kafka:${KAFKA_PORT} -- ./kafka_setup.sh"]
      interval: 10s
      timeout: 10s
      retries: 100
      start_period: 10s

  mongo:
    image: mongo:8.0
    container_name: mongo
    ports:
      - ${MONGO_PORT}:27017
    networks:
      - services
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
    volumes:
      - mongo-data:/data/db # ✅ Persistent volume for MongoDB

  postgres:
    image: postgres:17.6-alpine3.21
    container_name: postgres
    networks:
      - services
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgresql-data:/var/lib/postgresql/data # ✅ Persistent volume for PostgreSQL
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8.2
    container_name: redis
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - services
    restart: always
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:7.17.10
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - xpack.security.enabled=false
    ports:
      - "${ES_PORT}:9200"
    networks:
      - services
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data # ✅ Persistent volume for Elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:9200 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  temporal:
    container_name: temporal
    image: temporalio/auto-setup:1.22.3
    depends_on:
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=${POSTGRES_HOST}
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - TEMPORAL_ADDRESS=temporal:${TEMPORAL_PORT}
      - TEMPORAL_CLI_ADDRESS=temporal:${TEMPORAL_PORT}
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    ports:
      - "${TEMPORAL_PORT}:${TEMPORAL_PORT}"
    networks:
      - services
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig

  mailer:
    image: samarthasthan/mail-service:latest
    container_name: mailer
    restart: always
    depends_on:
      - kafka
    networks:
      - services
    environment:
      KAFKA_PORT: "29092"
      KAFKA_HOST: "kafka"
      KAFKA_GROUP_ID: "mail"
      KAFKA_TOPIC: "mail"
      SMTP_SERVER: ${SMTP_SERVER}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_LOGIN: ${SMTP_LOGIN}
      SMTP_PASSWORD: ${SMTP_PASSWORD}

  temporal-admin-tools:
    container_name: temporal-admin-tools
    image: temporalio/admin-tools:1.22.3
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:${TEMPORAL_PORT}
      - TEMPORAL_CLI_ADDRESS=temporal:${TEMPORAL_PORT}
    stdin_open: true
    tty: true
    networks:
      - services

  profile-grpc:
    image: samarthasthan/profile-service:latest
    container_name: profile-grpc
    restart: always
    depends_on:
      - mongo
    networks:
      - services
    ports:
      - "50053:50053"
    environment:
      PROFILE_SERVICE_HOST: "0.0.0.0"
      PROFILE_SERVICE_PORT: "50053"
      MONGO_URL: ${MONGO_URL}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET}
      S3_REGION: ${S3_REGION}
      S3_USE_SSL: ${S3_USE_SSL}

  auth-grpc:
    image: samarthasthan/auth-service:latest
    container_name: auth-grpc
    restart: always
    depends_on:
      - mongo
      - redis
    networks:
      - services
    ports:
      - "50052:50052"
    environment:
      AUTH_SERVICE_HOST: "0.0.0.0"
      AUTH_SERVICE_PORT: "50052"
      AUTH_REDIS_HOST: "redis"
      AUTH_REDIS_PORT: "6379"
      AUTH_REDIS_PASSWORD: ${REDIS_PASSWORD}
      AUTH_MONGO_HOST: "mongo"
      AUTH_MONGO_PORT: "27017"
      AUTH_MONGO_USER: ${MONGO_USER}
      AUTH_MONGO_PASSWORD: ${MONGO_PASSWORD}
      AUTH_MONGO_DATABASE: ${MONGO_DATABASE}
      SECRET_KEY: ${SECRET_KEY}

  nsfw-detector-service:
    image: samarthasthan/nsfw-detector-service:latest
    container_name: nsfw-detector-service
    restart: always
    depends_on:
      - kafka
    networks:
      - services
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres # ✅ Fixed from localhost to service name
      POSTGRES_PORT: 5432
      KAFKA_PORT: "29092"
      KAFKA_HOST: "kafka"
      KAFKA_GROUP_ID: "file"
      KAFKA_TOPIC: "process-file"
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET}
      S3_REGION: ${S3_REGION}
      S3_USE_SSL: ${S3_USE_SSL}

  cloud-storage-processor:
    image: samarthasthan/cloud-storage-processor:latest
    container_name: cloud-storage-processor
    restart: always
    depends_on:
      - kafka
    networks:
      - services
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres # ✅ Fixed from localhost to service name
      POSTGRES_PORT: 5432
      KAFKA_PORT: "29092"
      KAFKA_HOST: "kafka"
      KAFKA_GROUP_ID: "file"
      KAFKA_TOPIC: "process-file"
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET}
      S3_REGION: ${S3_REGION}
      S3_USE_SSL: ${S3_USE_SSL}

networks:
  services:
    driver: bridge

volumes:
  mongo-data:
  postgresql-data:
  elasticsearch-data:
