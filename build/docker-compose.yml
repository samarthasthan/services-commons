services:
  kafka:
    build:
      context: ../build/dockerfile/kafka
      dockerfile: ./Dockerfile
    container_name: kafka
    ports:
      - ${KAFKA_EXTERNAL_PORT}:9092
    networks:
      - services
    restart: always
    healthcheck:
      test:
        ["CMD-SHELL", "./wait-for.sh kafka:${KAFKA_PORT} -- ./kafka_setup.sh"]
      interval: 10s
      timeout: 10s
      retries: 100
      start_period: 10s

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - ${MONGO_PORT}:27017
    networks:
      - services
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}

  postgres:
    image: postgres:latest
    container_name: postgres
    networks:
      - services
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - services
    restart: always
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - services

  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:7.17.10
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - xpack.security.enabled=false
    ports:
      - "${ES_PORT}:9200"
    networks:
      - services
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:9200 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  temporal:
    container_name: temporal
    image: temporalio/auto-setup:1.22.3
    depends_on:
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=${POSTGRES_HOST}
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
      - TEMPORAL_ADDRESS=temporal:${TEMPORAL_PORT}
      - TEMPORAL_CLI_ADDRESS=temporal:${TEMPORAL_PORT}
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    ports:
      - "${TEMPORAL_PORT}:${TEMPORAL_PORT}"
    networks:
      - services
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig

  temporal-admin-tools:
    container_name: temporal-admin-tools
    image: temporalio/admin-tools:1.22.3
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:${TEMPORAL_PORT}
      - TEMPORAL_CLI_ADDRESS=temporal:${TEMPORAL_PORT}
    stdin_open: true
    tty: true
    networks:
      - services

networks:
  services:
    driver: bridge

volumes:
  minio-data:
  postgresql-data:
  elasticsearch-data:
